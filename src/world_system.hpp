#pragma once

// internal
#include "common.hpp"
#include "spawn_manager.hpp"

// stlib
#include <vector>
#include <random>

#define SDL_MAIN_HANDLED
#include <SDL.h>
#include <SDL_mixer.h>

#include "render_system.hpp"

// Container for all our entities and game logic.
// Individual rendering / updates are deferred to the update() methods.
class WorldSystem
{
public:
	WorldSystem();

	// creates main window
	GLFWwindow *create_window();

	// starts and loads music and sound effects
	bool start_and_load_sounds();

	// call to close the window
	void close_window();

	// starts the game
	void init(RenderSystem *renderer);

	// releases all associated resources
	~WorldSystem();

	// steps the game ahead by ms milliseconds
	bool step(float elapsed_ms);

	// check for collisions generated by the physics system
	void handle_collisions();

	// should the game be over ?
	bool is_over() const;

	static void game_over();
	static bool game_is_over;

private:
	float mouse_pos_x = 0.0f;
	float mouse_pos_y = 0.0f;

	void player_attack();
	void update_enemy_death_animations(float elapsed_ms);
	void update_screen_shake(float elapsed_ms);

	// Kung: player movement helper function
	void player_movement(int key, int action, Motion& player_motion);

	// input callback functions
	void on_key(int key, int, int action, int mod);
	void on_mouse_move(vec2 pos);
	void on_mouse_button_pressed(int button, int action, int mods);

	// restart level
	void restart_game();

	// OpenGL window handle
	GLFWwindow *window;

	// Number of players stopped by the towers, displayed in the window title
	unsigned int points;

	// Current experience level of the player
	unsigned int level;

	// Game state
	RenderSystem *renderer;
	float current_speed;

	// grid
	std::vector<Entity> grid_lines;

	// music references
	Mix_Music *current_bgm; //handle switching soundtrack
	Mix_Music *night_bgm;
	Mix_Music *day_bgm;
	Mix_Music *combat_bgm;
	Mix_Chunk *sword_attack_sound;
	Mix_Chunk *running_on_grass_sound;
	static Mix_Chunk *game_over_sound;

	// Manage spawning zombies
	SpawnManager spawn_manager;

	bool test_mode = false;

	
    // Sound effects
	float movement_sound_timer = 0.f;
    bool is_movement_sound_playing = false;
	void update_movement_sound(float elapsed_ms);

	void update_camera();
};
